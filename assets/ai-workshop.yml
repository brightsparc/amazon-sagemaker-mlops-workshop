Parameters:
  NotebookInstanceSubNetId:
    Type: AWS::EC2::Subnet::Id
    Description: "Select any subnet id"
    AllowedPattern: ^subnet\-[a-zA-Z0-9]+$
    ConstraintDescription: "You need to inform any subnetid"

  NotebookInstanceSecGroupId:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: "Select the default security group"
    AllowedPattern: ^sg\-[a-zA-Z0-9]+$
    ConstraintDescription: "Select the default security group"

Resources:
  MLOpsIrisModelRepo:
    Type: AWS::ECR::Repository
    Properties: 
      RepositoryName: sagemaker-rmars

  MLOpsBucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: !Sub mlops-${AWS::Region}-${AWS::AccountId}
      Tags:
        - Key: Name
          Value: !Sub mlops-${AWS::Region}-${AWS::AccountId}
      AccessControl: Private
      VersioningConfiguration:
        Status: Enabled

  MLOpsRepo:
    Type: AWS::CodeCommit::Repository
    Properties: 
      RepositoryDescription: Repository for the ML models/images code
      RepositoryName: mlops
      
  IAWorkshopNotebookInstance:
    Type: "AWS::SageMaker::NotebookInstance"
    Properties:
      NotebookInstanceName: IAWorkshop
      InstanceType: "ml.m4.xlarge"
      SubnetId: !Ref NotebookInstanceSubNetId
      SecurityGroupIds: !Ref NotebookInstanceSecGroupId
      RoleArn: !GetAtt MLOps.Arn
      LifecycleConfigName: !GetAtt IAWorkshopNotebookInstanceLifecycleConfig.NotebookInstanceLifecycleConfigName
    DependsOn: 
      - IAWorkshopNotebookInstanceLifecycleConfig
      - MLOps
      - MLOpsBucket
      - MLOpsRepo

  IAWorkshopNotebookInstanceLifecycleConfig:
    Type: "AWS::SageMaker::NotebookInstanceLifecycleConfig"
    Properties:
      NotebookInstanceLifecycleConfigName: !Sub ${AWS::StackName}-lifecycle-config
      OnStart:
        - Content: !Base64 |
            #!/bin/bash

            # This code was designed for a lab. You can reuse chunks of it but bear in mind
            # that you need to prepare something different for production.

            export HOME=/root/
            export AVAIL_ZONE=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone)
            export REGION=$(echo $AVAIL_ZONE | sed 's/[a-z]\+$//')

            echo "Configuring github for AWS credentials"
            git config --global credential.helper '!aws codecommit credential-helper $@'
            git config --global credential.UseHttpPath true
            
            cp /root/.gitconfig /home/ec2-user/ && chown ec2-user:ec2-user /home/ec2-user/.gitconfig

            echo "Now let's prepare our code commit repo"
            git clone https://git-codecommit.${REGION}.amazonaws.com/v1/repos/mlops /tmp/mlops-temp

            echo "First the master branch"
            cd /tmp/mlops-temp
            printf "version: 0.2\nphases:\n  build:\n    commands:\n      - echo 'dummy'\n" > buildspec.yml
            git add buildspec.yml
            git commit -a -m ' - repo init'
            git push

            echo "Then our rmars model branch"
            git checkout -b rmars-model
            git push --set-upstream origin rmars-model

            cd ../
            rm -rf /tmp/mlops-temp

            echo "Downloading exercises..."
            git clone -b r-mars https://github.com/brightsparc/amazon-sagemaker-mlops-workshop.git /home/ec2-user/SageMaker/mlops-workshop

            echo "Now let's clone both branches we just created"
            mkdir -p /home/ec2-user/SageMaker/mlops-workshop-images
            git clone --single-branch -b rmars-model https://git-codecommit.${REGION}.amazonaws.com/v1/repos/mlops  /home/ec2-user/SageMaker/mlops-workshop-images/rmars-model

            echo "Finally, let's clone and build an image for testing codebuild locally"
            git clone https://github.com/aws/aws-codebuild-docker-images.git /tmp/aws-codebuild
            chmod +x /tmp/aws-codebuild/local_builds/codebuild_build.sh

            docker pull amazon/aws-codebuild-local:latest --disable-content-trust=false

            chown ec2-user:ec2-user -R /home/ec2-user/SageMaker/

            cd /home/ec2-user/SageMaker/mlops-workshop

            parameters="ParameterKey=RepoBranchName,ParameterValue=%s"
            parameters="$parameters ParameterKey=ImageRepoName,ParameterValue=%s"
            parameters="$parameters ParameterKey=ImageTagName,ParameterValue=%s"

            echo "Here, we'll create the r-mars pipeline"

            aws cloudformation create-stack --stack-name sagemaker-rmars-model \
              --template-body file://assets/build-image.yml \
              --parameters $(printf "$parameters" "rmars-model" "sagemaker-rmars-model" "latest" )

            parameters="$parameters ParameterKey=ModelName,ParameterValue=%s"
            parameters="$parameters ParameterKey=DatasetKeyPath,ParameterValue=%s"
            aws cloudformation create-stack --stack-name sagemaker-rmars-train-pipeline \
              --template-body file://assets/train-model-pipeline.yml \
              --parameters $(printf "$parameters" "rmars-model" "sagemaker-rmars-model" "latest" "sagemaker-rmars-model" "training_jobs/rmars-model" )
            
            echo "Done! Let's do some stuff with this env"

  MLOpsCodeBuild:
    Type: "AWS::IAM::Role"
    Properties: 
      RoleName: MLOpsCodeBuild
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "codebuild.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      Policies: 
        - 
          PolicyName: "Admin"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action: "*"
                Resource: "*"

  MLOps:
    Type: "AWS::IAM::Role"
    Properties: 
      RoleName: MLOps
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "sagemaker.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "cloudformation.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "codepipeline.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "codebuild.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "events.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      Policies: 
        - 
          PolicyName: "Admin"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action: "*"
                Resource: "*"

Outputs:
  IAWorkshopNotebookInstanceId:
    Value: !Ref IAWorkshopNotebookInstance
  IAWorkshopNotebookInstanceLifecycleConfigId:
    Value: !Ref IAWorkshopNotebookInstanceLifecycleConfig

