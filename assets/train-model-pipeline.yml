# aws cloudformation delete-stack --stack-name iris-model-pipeline
# aws cloudformation create-stack --stack-name iris-model-pipeline --template-body file://build-model-pipeline.yml

Description: Create a CodePipeline for a Machine Learning Model
Parameters:
  CodeRepoName:
    Type: String
    Description: Name of the CodeCommit repo
  CodeBranchName:
    Type: String
    Description: Name of the branch the code is located
  ImageRepoName:
    Type: String
    Description: Name of the ECR repo without the image name
  ImageTagName:
    Type: String
    Description: Name of the ECR image tag
    Default: latest
  ModelName:
    Type: String
    Description: Name of the model
  ArtifactBucket:
    Type: String
    Description: The bucket for pipeline artifacts
    Default: latest
  MLOpsRoleArn:
    Type: String
    Description: Role for Lambda, CodePipeline and Cloudformation
    Default: latest

Resources:
  
  MLOpsLaunchJob:
    Type: "AWS::Lambda::Function"
    Properties: 
      FunctionName: !Sub ${AWS::StackName}-job-launcher
      Handler: index.lambda_handler
      MemorySize: 512
      Role: !Ref MLOpsRoleArn 
      Runtime: python3.6
      Timeout: 60
      Code: 
        ZipFile: !Sub |
          import boto3
          import io
          import zipfile
          import json
          import hashlib

          s3 = boto3.client('s3')
          sagemaker = boto3.client('sagemaker')
          codepipeline = boto3.client('codepipeline')

          def lambda_handler(event, context):
              pipeline_name='${AWS::StackName}'
              
              jobId = event["CodePipeline.job"]["id"]
              accountId = event["CodePipeline.job"]["accountId"]
              trainingJob = None
              try:
                  response = codepipeline.get_pipeline_state( name=pipeline_name )
                  executionId = response['stageStates'][0]['latestExecution']['pipelineExecutionId']
                  for inputArtifacts in event["CodePipeline.job"]["data"]["inputArtifacts"]:
                      if inputArtifacts['name'] == 'ModelSourceOutput':
                          s3Location = inputArtifacts['location']['s3Location']
                          zip_bytes = s3.get_object(Bucket=s3Location['bucketName'], Key=s3Location['objectKey'])['Body'].read()
                          with zipfile.ZipFile(io.BytesIO(zip_bytes), "r") as z:
                              trainingJob = json.loads(z.read('trainingjob.json').decode('ascii'))
                              monitoring = json.loads(z.read('monitoring.json').decode('ascii'))

                  if trainingJob is None:
                    raise(Exception("trainingjob.json wasn't found"))

                  trainingJob['TrainingJobName'] = 'mlops-${ModelName}-%s' % executionId
                  trainingJob['Tags'].append({'Key': 'jobid', 'Value': jobId})
                  print('Start training job %s' % (trainingJob['TrainingJobName']))      
                  sagemaker.create_training_job(**trainingJob)

                  params_training_job = {
                      "Parameters": {
                          "TrainingJobName": trainingJob['TrainingJobName']
                      }
                  }
                                        
                  params_deploy_dev = {
                      "Parameters": {
                          "ImageRepoName": "${ImageRepoName}",
                          "ImageTagName": "${ImageTagName}",
                          "ModelName": "${ModelName}",
                          "TrainJobId": executionId,
                      }
                  }

                  params_deploy_prod = {
                      "Parameters": dict(params_deploy_dev['Parameters'], **monitoring)
                  }

                  for outputArtifacts in event["CodePipeline.job"]["data"]["outputArtifacts"]:
                      if outputArtifacts['name'] == 'ModelTrainOutput':
                          s3Location = outputArtifacts['location']['s3Location']
                          zip_bytes = io.BytesIO()
                          with zipfile.ZipFile(zip_bytes, "w") as z:
                              z.writestr('assets/training-job.json', json.dumps(params_training_job))
                              z.writestr('assets/deploy-model-dev.json', json.dumps(params_deploy_dev))
                              z.writestr('assets/deploy-model-prd.json', json.dumps(params_deploy_prod))
                          zip_bytes.seek(0)
                          s3.put_object(Bucket=s3Location['bucketName'], Key=s3Location['objectKey'], Body=zip_bytes.read())
              
                  # and update codepipeline
                  codepipeline.put_job_success_result(jobId=jobId)
              except Exception as e:
                  print(e)
                  resp = codepipeline.put_job_failure_result(
                      jobId=jobId,
                      failureDetails={
                          'type': 'ConfigurationError',
                          'message': str(e),
                          'externalExecutionId': context.aws_request_id
                      }
                  )
              return 'Done'

      Description: "Function that will start a new Sagemaker Training Job"
      Tags:
        - Key: Name
          Value: !Sub mlops-launch-job-${ModelName}
    
  DeployPipeline:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      Name: !Sub ${AWS::StackName}
      RoleArn: !Ref MLOpsRoleArn
      ArtifactStore:
          Type: S3
          Location:
            Ref: ArtifactBucket
      Stages:
        -
          Name: Source
          Actions: 
            - 
              Name: GitSource
              ActionTypeId: 
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              OutputArtifacts: 
                - Name: ModelSourceOutput
              Configuration:
                BranchName: 
                  Ref: CodeBranchName
                RepositoryName: 
                  Ref: CodeRepoName
              RunOrder: 1
            -
              Name: EcrSource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: ECR
              OutputArtifacts:
                - Name: EcrSourceOutput
              Configuration:
                ImageTag:
                  Ref: ImageTagName
                RepositoryName:
                  Ref: ImageRepoName
              RunOrder: 1
        -
          Name: Train
          Actions:
            -
              Name: TrainModel
              InputArtifacts:
                - Name: ModelSourceOutput
              OutputArtifacts:
                - Name: ModelTrainOutput
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Version: 1
                Provider: Lambda
              Configuration:
                  FunctionName:
                    Ref: MLOpsLaunchJob
                  UserParameters: !Sub mlops-pipeline-${ModelName}
              RunOrder: 1
            - 
              Name: WaitForTraining
              InputArtifacts:
                - Name: ModelSourceOutput
                - Name: ModelTrainOutput
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              Configuration:
                ActionMode: REPLACE_ON_FAILURE
                RoleArn: !Ref MLOpsRoleArn
                StackName: !Sub ${AWS::StackName}-wait-training-job
                TemplateConfiguration: ModelTrainOutput::assets/training-job.json
                TemplatePath: ModelSourceOutput::assets/wait-training-job.yml
              RunOrder: 2
        -
          Name: DeployDev
          Actions:
            - 
              Name: DeployModelDev
              InputArtifacts:
                - Name: ModelSourceOutput
                - Name: ModelTrainOutput
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              Configuration:
                ActionMode: REPLACE_ON_FAILURE
                RoleArn: !Ref MLOpsRoleArn
                Capabilities: CAPABILITY_NAMED_IAM
                StackName: !Sub ${AWS::StackName}-deploy-dev
                TemplateConfiguration: ModelTrainOutput::assets/deploy-model-dev.json
                TemplatePath: ModelSourceOutput::assets/deploy-model-dev.yml
              RunOrder: 1
            -
              Name: ApproveDeploy
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Version: 1
                Provider: Manual
              Configuration:
                  CustomData: 'Shall this model be put into production?'
              RunOrder: 2
        -
          Name: DeployPrd
          Actions:
            - 
              Name: DeployModelPrd
              InputArtifacts:
                - Name: ModelSourceOutput
                - Name: ModelTrainOutput
              OutputArtifacts:
                - Name: ModelDeployPrdOutput
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation                
              Configuration:
                ActionMode: REPLACE_ON_FAILURE
                RoleArn: !Ref MLOpsRoleArn
                Capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
                StackName: !Sub ${AWS::StackName}-deploy-prd
                TemplateConfiguration: ModelTrainOutput::assets/deploy-model-prd.json
                TemplatePath: ModelSourceOutput::assets/deploy-model-prd.yml
              RunOrder: 1
    DependsOn:
      MLOpsLaunchJob