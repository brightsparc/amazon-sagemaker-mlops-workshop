AWSTemplateFormatVersion: '2010-09-09'
Description: 'Machine Learning Ops Workshop with SageMaker: lab guides and materials'
Parameters:
  BaseRepoName:
    Type: String
    Description: Name of the ECR repo / branch for base image
    Default: ludwig-base
    MinLength: 1
    MaxLength: 63
    AllowedPattern: ^[a-zA-Z0-9](-*[a-zA-Z0-9])*
  ImageRepoName:
    Type: String
    Description: Name of the ECR repo / branch for base image
    Default: ludwig-model
    MinLength: 1
    MaxLength: 63
    AllowedPattern: ^[a-zA-Z0-9](-*[a-zA-Z0-9])*
  ImageTagName:
    Type: String
    Description: Name of the ECR repo / branch for model image
    Default: latest
    AllowedPattern: ^[a-zA-Z0-9](-*[a-zA-Z0-9])*
  ModelName:
    Type: String
    Description: Name of the model / source code repository
    Default: multiclass
    MinLength: 1
    MaxLength: 15 # Limited to this due to mlops-{model}-{dev/prd}-{guid}
    AllowedPattern: ^[a-zA-Z0-9](-*[a-zA-Z0-9])*
  NotebookInstanceType:
    Type: String
    Default: ml.m5.xlarge
    AllowedValues:
      - ml.t3.medium
      - ml.t3.large
      - ml.t3.2xlarge
      - ml.m5.large
      - ml.m5.xlarge
      - ml.m5.2xlarge
    Description: Enter ml instance size for notebook. Default is ml.m5.xlarge
  DatasetBucket:
    Type: String
    Description: The source dataset bucket
    Default: open-banking-classificaiton-ap-southeast-2
  DatasetPrefix:
    Type: String
    Description: The path to data folder containing 'train', 'validation' and 'test' inputs.
    Default: data

Resources:
  MLOpsBaseImageRepo:
    Type: AWS::ECR::Repository
    Properties: 
      RepositoryName: !Sub ${AWS::StackName}-${BaseRepoName}

  MLOpsModelRepo:
    Type: AWS::ECR::Repository
    Properties: 
      RepositoryName: !Sub ${AWS::StackName}-${ImageRepoName}

  MLOpsBucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: !Sub ${AWS::StackName}-${AWS::Region}-${AWS::AccountId}
      AccessControl: Private
      VersioningConfiguration:
        Status: Enabled

  MLOpsRepo:
    Type: AWS::CodeCommit::Repository
    Properties: 
      RepositoryDescription: Repository for the ML models/images code
      RepositoryName: !Sub ${AWS::StackName}-${ModelName}

  NotebookInstance:
    Type: "AWS::SageMaker::NotebookInstance"
    Properties:
      NotebookInstanceName: !Sub ${AWS::StackName}-notebook
      InstanceType: !Ref NotebookInstanceType
      RoleArn: !GetAtt MLOps.Arn
      LifecycleConfigName: !GetAtt NotebookInstanceLifecycleConfig.NotebookInstanceLifecycleConfigName
    DependsOn: 
      - NotebookInstanceLifecycleConfig
      - MLOps
      - MLOpsBucket
      - MLOpsRepo

  NotebookInstanceLifecycleConfig:
    Type: "AWS::SageMaker::NotebookInstanceLifecycleConfig"
    Properties:
      NotebookInstanceLifecycleConfigName: !Sub ${AWS::StackName}-lifecycle-config
      OnStart:
        - Content: 
            Fn::Base64:
              Fn::Sub: |
                #!/bin/bash

                # This code was designed for a lab. You can reuse chunks of it but bear in mind
                # that you need to prepare something different for production.

                export HOME=/root/

                echo "Configuring github for AWS credentials"
                git config --global credential.helper '!aws codecommit credential-helper $@'
                git config --global credential.UseHttpPath true
                
                cp /root/.gitconfig /home/ec2-user/ && chown ec2-user:ec2-user /home/ec2-user/.gitconfig

                echo "Now let's prepare our code commit repo"
                git clone ${MLOpsRepo.CloneUrlHttp} /tmp/mlops-temp

                echo "First the master branch"
                cd /tmp/mlops-temp
                printf "version: 0.2\nphases:\n  build:\n    commands:\n      - echo 'dummy'\n" > buildspec.yml
                git add buildspec.yml
                git commit -a -m ' - repo init'
                git push

                echo "Then the base branch"
                git checkout -b ${BaseRepoName}
                git push --set-upstream origin ${BaseRepoName}
                
                echo "Then our image model branch"
                git checkout -b ${ImageRepoName}
                git push --set-upstream origin ${ImageRepoName}

                cd ../
                rm -rf /tmp/mlops-temp

                echo "Downloading exercises..."
                git clone -b prd-api https://github.com/brightsparc/amazon-sagemaker-mlops-workshop.git /home/ec2-user/SageMaker/mlops-workshop

                echo "Now let's clone both branches we just created"
                mkdir -p /home/ec2-user/SageMaker/mlops-workshop-images
                git clone --single-branch -b ${BaseRepoName} ${MLOpsRepo.CloneUrlHttp}  /home/ec2-user/SageMaker/mlops-workshop-images/${MLOpsBaseImageRepo}
                git clone --single-branch -b ${ImageRepoName} ${MLOpsRepo.CloneUrlHttp}  /home/ec2-user/SageMaker/mlops-workshop-images/${MLOpsModelRepo}
                git clone --single-branch -b master ${MLOpsRepo.CloneUrlHttp} /home/ec2-user/SageMaker/mlops-workshop-images/master

                echo "Finally, let's clone and build an image for testing codebuild locally"
                git clone https://github.com/aws/aws-codebuild-docker-images.git /tmp/aws-codebuild
                chmod +x /tmp/aws-codebuild/local_builds/codebuild_build.sh

                docker pull amazon/aws-codebuild-local:latest --disable-content-trust=false

                chown ec2-user:ec2-user -R /home/ec2-user/SageMaker/

                cd /home/ec2-user/SageMaker/mlops-workshop

                echo "Create code pipeline for base and image build"

                aws cloudformation deploy --template-file assets/build-image.yml \
                  --stack-name "${AWS::StackName}-${BaseRepoName}" --parameter-overrides \
                  CodeRepoName="${AWS::StackName}-${ModelName}" \
                  CodeBranchName="${BaseRepoName}" \
                  BaseRepoName="" \
                  ImageRepoName="${MLOpsBaseImageRepo}" \
                  ImageTagName="${ImageTagName}" \
                  ArtifactBucket="${MLOpsBucket}" \
                  MLOpsRoleArn="${MLOps.Arn}"

                aws cloudformation deploy --template-file assets/build-image.yml \
                  --stack-name "${AWS::StackName}-${ImageRepoName}" --parameter-overrides \
                  CodeRepoName="${AWS::StackName}-${ModelName}" \
                  CodeBranchName="${ImageRepoName}" \
                  BaseRepoName="${MLOpsBaseImageRepo}" \
                  ImageRepoName="${MLOpsModelRepo}" \
                  ImageTagName="${ImageTagName}" \
                  ArtifactBucket="${MLOpsBucket}" \
                  MLOpsRoleArn="${MLOps.Arn}"

                echo "Create code pipeline for train model"

                aws cloudformation deploy --template-file assets/train-model-pipeline.yml \
                  --stack-name "${AWS::StackName}-${ModelName}" --parameter-overrides \
                  CodeRepoName="${AWS::StackName}-${ModelName}" \
                  CodeBranchName="master" \
                  ImageRepoName="${MLOpsModelRepo}" \
                  ImageTagName="${ImageTagName}" \
                  ModelName="${ModelName}" \
                  ArtifactBucket="${MLOpsBucket}" \
                  MLOpsRoleArn="${MLOps.Arn}"

                echo "Install custom resource helper, and deploy the sagemaker custom resource stack"

                pip install -t ./cfn crhelper

                aws cloudformation package --template-file assets/sagemaker-custom-resource.yml \
                  --output-template-file assets/sagemaker-custom-resource-packaged.yml \
                  --s3-bucket ${MLOpsBucket}

                aws cloudformation deploy --stack-name sagemaker-custom-resource \
                  --template-file assets/sagemaker-custom-resource-packaged.yml \
                  --capabilities CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND

                echo "Update environment variables for notebooks"

                touch /etc/profile.d/jupyter-env.sh
                echo "export ARTIFACT_BUCKET=${MLOpsBucket}" >> /etc/profile.d/jupyter-env.sh
                echo "export PIPELINE_NAME=${AWS::StackName}-${ModelName}" >> /etc/profile.d/jupyter-env.sh
                echo "export BASE_REPO=${MLOpsBaseImageRepo}" >> /etc/profile.d/jupyter-env.sh
                echo "export IMAGE_REPO=${MLOpsModelRepo}" >> /etc/profile.d/jupyter-env.sh
                echo "export IMAGE_TAG=${ImageTagName}" >> /etc/profile.d/jupyter-env.sh
                echo "export MODEL_NAME=${ModelName}" >> /etc/profile.d/jupyter-env.sh
                echo "export DATASET_BUCKET=${DatasetBucket}" >> /etc/profile.d/jupyter-env.sh
                echo "export DATASET_PREFIX=${DatasetPrefix}" >> /etc/profile.d/jupyter-env.sh
                initctl restart jupyter-server --no-wait

                echo "Done! Let's do some stuff with this env"

  MLOps:
    Type: "AWS::IAM::Role"
    Properties: 
      RoleName: !Sub ${AWS::StackName}-MLOps
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "sagemaker.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "cloudformation.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "codepipeline.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "codebuild.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "events.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      Policies: 
        - 
          PolicyName: "Admin"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action: "*"
                Resource: "*"